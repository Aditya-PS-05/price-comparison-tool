// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations in model Account below
// Further reading:
// https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password authentication
  
  // User preferences
  defaultCountry String @default("US")
  defaultCurrency String @default("USD")
  timezone       String @default("UTC")
  language       String @default("en")
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  searches      Search[]
  savedProducts SavedProduct[]
  priceAlerts   PriceAlert[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application-specific models
model Search {
  id          String   @id @default(cuid())
  userId      String
  query       String
  country     String
  resultsCount Int
  searchTime  DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([searchTime])
}

model SavedProduct {
  id           String   @id @default(cuid())
  userId       String
  productName  String
  currentPrice Decimal
  savedPrice   Decimal
  currency     String
  country      String
  seller       String
  productUrl   String
  imageUrl     String?
  status       String   @default("active") // active, discontinued, price_changed
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
}

model PriceAlert {
  id           String   @id @default(cuid())
  userId       String
  productName  String
  targetPrice  Decimal
  currentPrice Decimal?
  currency     String
  country      String
  isActive     Boolean  @default(true)
  triggered    Int      @default(0) // Number of times triggered
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isActive])
}
